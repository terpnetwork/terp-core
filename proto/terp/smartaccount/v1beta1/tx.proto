syntax = "proto3";
package terp.smartaccount.v1beta1;

import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/terpnetwork/terp-core/x/smart-account/types";


// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc AddAuthenticator(MsgAddAuthenticator)
      returns (MsgAddAuthenticatorResponse);
  rpc RemoveAuthenticator(MsgRemoveAuthenticator)
      returns (MsgRemoveAuthenticatorResponse);

  // SetActiveState sets the active state of the authenticator.
  // Primarily used for circuit breaking.
  rpc SetActiveState(MsgSetActiveState) returns (MsgSetActiveStateResponse);
}

// MsgAddAuthenticatorRequest defines the Msg/AddAuthenticator request type.
message MsgAddAuthenticator {
  option (amino.name) = "terp/smartaccount/add-authenticator";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string authenticator_type = 2;
  // data is the initialization data for the authenticator.
  // It must be set to exactly one of the following.
  AuthenticatorConfig  config = 3;
}


// AuthenticatorData represents initialization data that can be passed as raw JSON or JSON string.
message AuthenticatorConfig {
  oneof data {
    // value_string contains JSON as a string (e.g., "{\"threshold\":\"2\"}")
    string value_string = 1;

    // value_raw contains raw binary JSON (e.g., {"threshold":"2"})
    bytes value_raw = 2;
  }
}
 

message SubAuthenticatorInitData {
 string type = 1;
 AuthenticatorConfig config = 2;
}

// MsgAddAuthenticatorResponse defines the Msg/AddAuthenticator response type.
message MsgAddAuthenticatorResponse { bool success = 1; }

// MsgRemoveAuthenticatorRequest defines the Msg/RemoveAuthenticator request
// type.
message MsgRemoveAuthenticator {
  option (amino.name) = "terp/smartaccount/remove-authenticator";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  uint64 id = 2;
}

// MsgRemoveAuthenticatorResponse defines the Msg/RemoveAuthenticator response
// type.
message MsgRemoveAuthenticatorResponse { bool success = 1; }

message MsgSetActiveState {
  option (amino.name) = "terp/smartaccount/set-active-state";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  bool active = 2;
}

message MsgSetActiveStateResponse {}

// AgAuthData is a Serialized array of signing.SignatureV2.
// We Marshal & Unmarshal via `UnmarshalSignatureJSON` & `MarshalSignatureJSON`
message AgAuthData { bytes data = 1; }

// TxExtension allows for additional authenticator-specific data in
// transactions.
message TxExtension {
  // selected_authenticators holds the authenticator_id for the chosen
  // authenticator per message.
  repeated uint64 selected_authenticators = 1;
  // optional, used to provide aggregate key signature data to module for
  // authentication.
  AgAuthData agg_auth = 2;
}

// BlsConfig
message BlsConfig {
  // list of pubkeys that are points in aggregate key set
  repeated bytes pubkeys = 1;
  // minimum threshold of points in order for tx to be valid
  uint64 threshold = 2;
}
