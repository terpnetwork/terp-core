// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: terp/smartaccount/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAddAuthenticatorRequest defines the Msg/AddAuthenticator request type.
type MsgAddAuthenticator struct {
	Sender            string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	AuthenticatorType string `protobuf:"bytes,2,opt,name=authenticator_type,json=authenticatorType,proto3" json:"authenticator_type,omitempty"`
	// data is the initialization data for the authenticator.
	// It must be set to exactly one of the following.
	Config *AuthenticatorConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *MsgAddAuthenticator) Reset()         { *m = MsgAddAuthenticator{} }
func (m *MsgAddAuthenticator) String() string { return proto.CompactTextString(m) }
func (*MsgAddAuthenticator) ProtoMessage()    {}
func (*MsgAddAuthenticator) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec1eaeaaf4cce55, []int{0}
}
func (m *MsgAddAuthenticator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAuthenticator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAuthenticator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAuthenticator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAuthenticator.Merge(m, src)
}
func (m *MsgAddAuthenticator) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAuthenticator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAuthenticator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAuthenticator proto.InternalMessageInfo

func (m *MsgAddAuthenticator) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgAddAuthenticator) GetAuthenticatorType() string {
	if m != nil {
		return m.AuthenticatorType
	}
	return ""
}

func (m *MsgAddAuthenticator) GetConfig() *AuthenticatorConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// AuthenticatorData represents initialization data that can be passed as raw JSON or JSON string.
type AuthenticatorConfig struct {
	// Types that are valid to be assigned to Data:
	//
	//	*AuthenticatorConfig_ValueString
	//	*AuthenticatorConfig_ValueRaw
	Data isAuthenticatorConfig_Data `protobuf_oneof:"data"`
}

func (m *AuthenticatorConfig) Reset()         { *m = AuthenticatorConfig{} }
func (m *AuthenticatorConfig) String() string { return proto.CompactTextString(m) }
func (*AuthenticatorConfig) ProtoMessage()    {}
func (*AuthenticatorConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec1eaeaaf4cce55, []int{1}
}
func (m *AuthenticatorConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticatorConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthenticatorConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthenticatorConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticatorConfig.Merge(m, src)
}
func (m *AuthenticatorConfig) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticatorConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticatorConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticatorConfig proto.InternalMessageInfo

type isAuthenticatorConfig_Data interface {
	isAuthenticatorConfig_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AuthenticatorConfig_ValueString struct {
	ValueString string `protobuf:"bytes,1,opt,name=value_string,json=valueString,proto3,oneof" json:"value_string,omitempty"`
}
type AuthenticatorConfig_ValueRaw struct {
	ValueRaw []byte `protobuf:"bytes,2,opt,name=value_raw,json=valueRaw,proto3,oneof" json:"value_raw,omitempty"`
}

func (*AuthenticatorConfig_ValueString) isAuthenticatorConfig_Data() {}
func (*AuthenticatorConfig_ValueRaw) isAuthenticatorConfig_Data()    {}

func (m *AuthenticatorConfig) GetData() isAuthenticatorConfig_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AuthenticatorConfig) GetValueString() string {
	if x, ok := m.GetData().(*AuthenticatorConfig_ValueString); ok {
		return x.ValueString
	}
	return ""
}

func (m *AuthenticatorConfig) GetValueRaw() []byte {
	if x, ok := m.GetData().(*AuthenticatorConfig_ValueRaw); ok {
		return x.ValueRaw
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AuthenticatorConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AuthenticatorConfig_ValueString)(nil),
		(*AuthenticatorConfig_ValueRaw)(nil),
	}
}

type SubAuthenticatorInitData struct {
	Type   string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Config *AuthenticatorConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *SubAuthenticatorInitData) Reset()         { *m = SubAuthenticatorInitData{} }
func (m *SubAuthenticatorInitData) String() string { return proto.CompactTextString(m) }
func (*SubAuthenticatorInitData) ProtoMessage()    {}
func (*SubAuthenticatorInitData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec1eaeaaf4cce55, []int{2}
}
func (m *SubAuthenticatorInitData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubAuthenticatorInitData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubAuthenticatorInitData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubAuthenticatorInitData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubAuthenticatorInitData.Merge(m, src)
}
func (m *SubAuthenticatorInitData) XXX_Size() int {
	return m.Size()
}
func (m *SubAuthenticatorInitData) XXX_DiscardUnknown() {
	xxx_messageInfo_SubAuthenticatorInitData.DiscardUnknown(m)
}

var xxx_messageInfo_SubAuthenticatorInitData proto.InternalMessageInfo

func (m *SubAuthenticatorInitData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SubAuthenticatorInitData) GetConfig() *AuthenticatorConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// MsgAddAuthenticatorResponse defines the Msg/AddAuthenticator response type.
type MsgAddAuthenticatorResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MsgAddAuthenticatorResponse) Reset()         { *m = MsgAddAuthenticatorResponse{} }
func (m *MsgAddAuthenticatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAuthenticatorResponse) ProtoMessage()    {}
func (*MsgAddAuthenticatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec1eaeaaf4cce55, []int{3}
}
func (m *MsgAddAuthenticatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAuthenticatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAuthenticatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAuthenticatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAuthenticatorResponse.Merge(m, src)
}
func (m *MsgAddAuthenticatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAuthenticatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAuthenticatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAuthenticatorResponse proto.InternalMessageInfo

func (m *MsgAddAuthenticatorResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// MsgRemoveAuthenticatorRequest defines the Msg/RemoveAuthenticator request
// type.
type MsgRemoveAuthenticator struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Id     uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgRemoveAuthenticator) Reset()         { *m = MsgRemoveAuthenticator{} }
func (m *MsgRemoveAuthenticator) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAuthenticator) ProtoMessage()    {}
func (*MsgRemoveAuthenticator) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec1eaeaaf4cce55, []int{4}
}
func (m *MsgRemoveAuthenticator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAuthenticator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAuthenticator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAuthenticator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAuthenticator.Merge(m, src)
}
func (m *MsgRemoveAuthenticator) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAuthenticator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAuthenticator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAuthenticator proto.InternalMessageInfo

func (m *MsgRemoveAuthenticator) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRemoveAuthenticator) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// MsgRemoveAuthenticatorResponse defines the Msg/RemoveAuthenticator response
// type.
type MsgRemoveAuthenticatorResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MsgRemoveAuthenticatorResponse) Reset()         { *m = MsgRemoveAuthenticatorResponse{} }
func (m *MsgRemoveAuthenticatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAuthenticatorResponse) ProtoMessage()    {}
func (*MsgRemoveAuthenticatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec1eaeaaf4cce55, []int{5}
}
func (m *MsgRemoveAuthenticatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAuthenticatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAuthenticatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAuthenticatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAuthenticatorResponse.Merge(m, src)
}
func (m *MsgRemoveAuthenticatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAuthenticatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAuthenticatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAuthenticatorResponse proto.InternalMessageInfo

func (m *MsgRemoveAuthenticatorResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type MsgSetActiveState struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Active bool   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *MsgSetActiveState) Reset()         { *m = MsgSetActiveState{} }
func (m *MsgSetActiveState) String() string { return proto.CompactTextString(m) }
func (*MsgSetActiveState) ProtoMessage()    {}
func (*MsgSetActiveState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec1eaeaaf4cce55, []int{6}
}
func (m *MsgSetActiveState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetActiveState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetActiveState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetActiveState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetActiveState.Merge(m, src)
}
func (m *MsgSetActiveState) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetActiveState) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetActiveState.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetActiveState proto.InternalMessageInfo

func (m *MsgSetActiveState) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSetActiveState) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type MsgSetActiveStateResponse struct {
}

func (m *MsgSetActiveStateResponse) Reset()         { *m = MsgSetActiveStateResponse{} }
func (m *MsgSetActiveStateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetActiveStateResponse) ProtoMessage()    {}
func (*MsgSetActiveStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec1eaeaaf4cce55, []int{7}
}
func (m *MsgSetActiveStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetActiveStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetActiveStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetActiveStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetActiveStateResponse.Merge(m, src)
}
func (m *MsgSetActiveStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetActiveStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetActiveStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetActiveStateResponse proto.InternalMessageInfo

// AgAuthData is a Serialized array of signing.SignatureV2.
// We Marshal & Unmarshal via `UnmarshalSignatureJSON` & `MarshalSignatureJSON`
type AgAuthData struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AgAuthData) Reset()         { *m = AgAuthData{} }
func (m *AgAuthData) String() string { return proto.CompactTextString(m) }
func (*AgAuthData) ProtoMessage()    {}
func (*AgAuthData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec1eaeaaf4cce55, []int{8}
}
func (m *AgAuthData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgAuthData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgAuthData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgAuthData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgAuthData.Merge(m, src)
}
func (m *AgAuthData) XXX_Size() int {
	return m.Size()
}
func (m *AgAuthData) XXX_DiscardUnknown() {
	xxx_messageInfo_AgAuthData.DiscardUnknown(m)
}

var xxx_messageInfo_AgAuthData proto.InternalMessageInfo

func (m *AgAuthData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// TxExtension allows for additional authenticator-specific data in
// transactions.
type TxExtension struct {
	// selected_authenticators holds the authenticator_id for the chosen
	// authenticator per message.
	SelectedAuthenticators []uint64 `protobuf:"varint,1,rep,packed,name=selected_authenticators,json=selectedAuthenticators,proto3" json:"selected_authenticators,omitempty"`
	// optional, used to provide aggregate key signature data to module for
	// authentication.
	AggAuth *AgAuthData `protobuf:"bytes,2,opt,name=agg_auth,json=aggAuth,proto3" json:"agg_auth,omitempty"`
}

func (m *TxExtension) Reset()         { *m = TxExtension{} }
func (m *TxExtension) String() string { return proto.CompactTextString(m) }
func (*TxExtension) ProtoMessage()    {}
func (*TxExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec1eaeaaf4cce55, []int{9}
}
func (m *TxExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxExtension.Merge(m, src)
}
func (m *TxExtension) XXX_Size() int {
	return m.Size()
}
func (m *TxExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_TxExtension.DiscardUnknown(m)
}

var xxx_messageInfo_TxExtension proto.InternalMessageInfo

func (m *TxExtension) GetSelectedAuthenticators() []uint64 {
	if m != nil {
		return m.SelectedAuthenticators
	}
	return nil
}

func (m *TxExtension) GetAggAuth() *AgAuthData {
	if m != nil {
		return m.AggAuth
	}
	return nil
}

// BlsConfig
type BlsConfig struct {
	// list of pubkeys that are points in aggregate key set
	Pubkeys [][]byte `protobuf:"bytes,1,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	// minimum threshold of points in order for tx to be valid
	Threshold uint64 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (m *BlsConfig) Reset()         { *m = BlsConfig{} }
func (m *BlsConfig) String() string { return proto.CompactTextString(m) }
func (*BlsConfig) ProtoMessage()    {}
func (*BlsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec1eaeaaf4cce55, []int{10}
}
func (m *BlsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlsConfig.Merge(m, src)
}
func (m *BlsConfig) XXX_Size() int {
	return m.Size()
}
func (m *BlsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BlsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BlsConfig proto.InternalMessageInfo

func (m *BlsConfig) GetPubkeys() [][]byte {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

func (m *BlsConfig) GetThreshold() uint64 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgAddAuthenticator)(nil), "terp.smartaccount.v1beta1.MsgAddAuthenticator")
	proto.RegisterType((*AuthenticatorConfig)(nil), "terp.smartaccount.v1beta1.AuthenticatorConfig")
	proto.RegisterType((*SubAuthenticatorInitData)(nil), "terp.smartaccount.v1beta1.SubAuthenticatorInitData")
	proto.RegisterType((*MsgAddAuthenticatorResponse)(nil), "terp.smartaccount.v1beta1.MsgAddAuthenticatorResponse")
	proto.RegisterType((*MsgRemoveAuthenticator)(nil), "terp.smartaccount.v1beta1.MsgRemoveAuthenticator")
	proto.RegisterType((*MsgRemoveAuthenticatorResponse)(nil), "terp.smartaccount.v1beta1.MsgRemoveAuthenticatorResponse")
	proto.RegisterType((*MsgSetActiveState)(nil), "terp.smartaccount.v1beta1.MsgSetActiveState")
	proto.RegisterType((*MsgSetActiveStateResponse)(nil), "terp.smartaccount.v1beta1.MsgSetActiveStateResponse")
	proto.RegisterType((*AgAuthData)(nil), "terp.smartaccount.v1beta1.AgAuthData")
	proto.RegisterType((*TxExtension)(nil), "terp.smartaccount.v1beta1.TxExtension")
	proto.RegisterType((*BlsConfig)(nil), "terp.smartaccount.v1beta1.BlsConfig")
}

func init() {
	proto.RegisterFile("terp/smartaccount/v1beta1/tx.proto", fileDescriptor_5ec1eaeaaf4cce55)
}

var fileDescriptor_5ec1eaeaaf4cce55 = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x41, 0x4f, 0xdb, 0x4a,
	0x10, 0x8e, 0x93, 0xbc, 0x90, 0x0c, 0x11, 0x7a, 0x2c, 0x4f, 0x21, 0x84, 0xf7, 0x22, 0x64, 0xf4,
	0x2a, 0x84, 0x9a, 0x58, 0x81, 0x0a, 0xd4, 0x9c, 0x1a, 0x68, 0x2b, 0x7a, 0x88, 0x54, 0x6d, 0x38,
	0xf5, 0x82, 0x36, 0xf6, 0x76, 0x63, 0x91, 0x78, 0x23, 0xef, 0x3a, 0x09, 0x3d, 0x55, 0x6d, 0x0f,
	0x55, 0x4f, 0xfd, 0x29, 0xfc, 0x8c, 0x1e, 0x39, 0xb6, 0xb7, 0x0a, 0x0e, 0xfc, 0x8d, 0xca, 0x6b,
	0x9b, 0xe2, 0xc4, 0x44, 0xa0, 0x5e, 0x92, 0x9d, 0xf1, 0x37, 0x33, 0xdf, 0xcc, 0x7c, 0x5e, 0x83,
	0x2e, 0xa9, 0x3b, 0x34, 0xc4, 0x80, 0xb8, 0x92, 0x98, 0x26, 0xf7, 0x1c, 0x69, 0x8c, 0x1a, 0x5d,
	0x2a, 0x49, 0xc3, 0x90, 0x93, 0xfa, 0xd0, 0xe5, 0x92, 0xa3, 0x35, 0x1f, 0x53, 0xbf, 0x8d, 0xa9,
	0x87, 0x98, 0xca, 0xaa, 0xc9, 0xc5, 0x80, 0x0b, 0x63, 0x20, 0x98, 0x31, 0x6a, 0xf8, 0x7f, 0x41,
	0x4c, 0x65, 0x99, 0x0c, 0x6c, 0x87, 0x1b, 0xea, 0x37, 0x74, 0xfd, 0xc3, 0x38, 0xe3, 0xea, 0x68,
	0xf8, 0xa7, 0xc0, 0xab, 0xff, 0xd0, 0x60, 0xa5, 0x2d, 0x58, 0xcb, 0xb2, 0x5a, 0x9e, 0xec, 0x51,
	0x47, 0xda, 0x26, 0x91, 0xdc, 0x45, 0x25, 0xc8, 0x09, 0xea, 0x58, 0xd4, 0x2d, 0x6b, 0x1b, 0xda,
	0x56, 0x01, 0x87, 0x16, 0xaa, 0x01, 0x22, 0xb7, 0x81, 0x27, 0xf2, 0x6c, 0x48, 0xcb, 0x69, 0x85,
	0x59, 0x8e, 0x3d, 0x39, 0x3e, 0x1b, 0x52, 0xf4, 0x12, 0x72, 0x26, 0x77, 0xde, 0xda, 0xac, 0x9c,
	0xd9, 0xd0, 0xb6, 0x16, 0x77, 0xea, 0xf5, 0x3b, 0x9b, 0xa9, 0xc7, 0x08, 0x1c, 0xaa, 0x28, 0x1c,
	0x46, 0x37, 0x77, 0x3f, 0x5c, 0x9f, 0x6f, 0x87, 0x1c, 0xbe, 0x5c, 0x9f, 0x6f, 0x6f, 0xce, 0xce,
	0x8d, 0x58, 0x56, 0x2d, 0x46, 0x40, 0x27, 0xb0, 0x92, 0x90, 0x13, 0x6d, 0x42, 0x71, 0x44, 0xfa,
	0x1e, 0x3d, 0x11, 0xd2, 0xb5, 0x1d, 0x16, 0x34, 0x78, 0x94, 0xc2, 0x8b, 0xca, 0xdb, 0x51, 0x4e,
	0xf4, 0x1f, 0x14, 0x02, 0x90, 0x4b, 0xc6, 0xaa, 0xbd, 0xe2, 0x51, 0x0a, 0xe7, 0x95, 0x0b, 0x93,
	0xf1, 0x41, 0x0e, 0xb2, 0x16, 0x91, 0x44, 0x1f, 0x41, 0xb9, 0xe3, 0x75, 0x63, 0x55, 0x5e, 0x39,
	0xb6, 0x7c, 0x4e, 0x24, 0x41, 0x08, 0xb2, 0x6a, 0x38, 0xc1, 0x00, 0xd5, 0xf9, 0xd6, 0x3c, 0xd2,
	0x7f, 0x32, 0x0f, 0x7d, 0x1f, 0xd6, 0x13, 0xb6, 0x86, 0xa9, 0x18, 0x72, 0x47, 0x50, 0x54, 0x86,
	0x05, 0xe1, 0x99, 0x26, 0x15, 0x42, 0x55, 0xcf, 0xe3, 0xc8, 0xd4, 0x27, 0x50, 0x6a, 0x0b, 0x86,
	0xe9, 0x80, 0x8f, 0xe8, 0xfd, 0x36, 0xbe, 0x04, 0x69, 0xdb, 0x52, 0x74, 0xb3, 0x38, 0x6d, 0x5b,
	0xcd, 0xbd, 0xa9, 0x55, 0x3c, 0x9a, 0x5d, 0x85, 0xab, 0xd2, 0x4f, 0x6d, 0xa3, 0x09, 0xd5, 0xe4,
	0xca, 0xf7, 0x60, 0x3d, 0x86, 0xe5, 0xb6, 0x60, 0x1d, 0x2a, 0x5b, 0xa6, 0xb4, 0x47, 0xb4, 0x23,
	0x89, 0xa4, 0x77, 0x12, 0x2e, 0x41, 0x8e, 0x28, 0x98, 0x22, 0x9d, 0xc7, 0xa1, 0xd5, 0xdc, 0x99,
	0x22, 0x9e, 0xf0, 0xee, 0x09, 0x2a, 0x6b, 0x01, 0xba, 0x26, 0xfc, 0x1a, 0xfa, 0x3a, 0xac, 0xcd,
	0x14, 0x8e, 0xf8, 0xea, 0x1b, 0x00, 0x2d, 0xe6, 0xb7, 0x12, 0xad, 0xdb, 0x97, 0x84, 0x22, 0x53,
	0xc4, 0x81, 0x3c, 0x3e, 0x6b, 0xb0, 0x78, 0x3c, 0x79, 0x31, 0x91, 0xd4, 0x11, 0x36, 0x77, 0xd0,
	0x3e, 0xac, 0x0a, 0xda, 0xa7, 0xa6, 0xa4, 0xd6, 0x49, 0x6c, 0x3a, 0x7e, 0xc7, 0x99, 0xad, 0x2c,
	0x2e, 0x45, 0x8f, 0x63, 0x13, 0x12, 0xe8, 0x19, 0xe4, 0x09, 0x63, 0x2a, 0x26, 0x54, 0xce, 0xff,
	0xf3, 0x94, 0x73, 0xc3, 0x0a, 0x2f, 0x10, 0xa6, 0x0c, 0xfd, 0x10, 0x0a, 0x07, 0x7d, 0x11, 0xbe,
	0x02, 0x65, 0x58, 0x18, 0x7a, 0xdd, 0x53, 0x7a, 0x16, 0xd4, 0x2d, 0xe2, 0xc8, 0x44, 0xff, 0x42,
	0x41, 0xf6, 0x5c, 0x2a, 0x7a, 0xbc, 0x1f, 0x2d, 0xfd, 0xb7, 0x63, 0xe7, 0x53, 0x06, 0x32, 0x6d,
	0xc1, 0xd0, 0x3b, 0xf8, 0x7b, 0xe6, 0xc6, 0x98, 0x27, 0xe5, 0x04, 0xad, 0x56, 0xf6, 0x1e, 0x86,
	0xbf, 0x51, 0xc9, 0x47, 0x0d, 0x56, 0x92, 0xf4, 0xdb, 0x98, 0x9f, 0x2f, 0x21, 0xa4, 0xf2, 0xf4,
	0xc1, 0x21, 0x37, 0x2c, 0x24, 0x2c, 0x4d, 0xc9, 0xf1, 0xf1, 0xfc, 0x64, 0x71, 0x74, 0xe5, 0xc9,
	0x43, 0xd0, 0x51, 0xd5, 0xca, 0x5f, 0xef, 0xaf, 0xcf, 0xb7, 0xb5, 0x83, 0xd7, 0xdf, 0x2e, 0xab,
	0xda, 0xc5, 0x65, 0x55, 0xfb, 0x79, 0x59, 0xd5, 0xbe, 0x5e, 0x55, 0x53, 0x17, 0x57, 0xd5, 0xd4,
	0xf7, 0xab, 0x6a, 0xea, 0xcd, 0x1e, 0xb3, 0x65, 0xcf, 0xeb, 0xd6, 0x4d, 0x3e, 0x30, 0xfc, 0x02,
	0x0e, 0x95, 0x63, 0xee, 0x9e, 0xaa, 0x73, 0xcd, 0xe4, 0x2e, 0x35, 0x26, 0x81, 0xe2, 0x6b, 0x91,
	0xe4, 0xfd, 0x6b, 0x49, 0x74, 0x73, 0xea, 0x6b, 0xb0, 0xfb, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xe6,
	0xb2, 0xbc, 0x9c, 0x90, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddAuthenticator(ctx context.Context, in *MsgAddAuthenticator, opts ...grpc.CallOption) (*MsgAddAuthenticatorResponse, error)
	RemoveAuthenticator(ctx context.Context, in *MsgRemoveAuthenticator, opts ...grpc.CallOption) (*MsgRemoveAuthenticatorResponse, error)
	// SetActiveState sets the active state of the authenticator.
	// Primarily used for circuit breaking.
	SetActiveState(ctx context.Context, in *MsgSetActiveState, opts ...grpc.CallOption) (*MsgSetActiveStateResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddAuthenticator(ctx context.Context, in *MsgAddAuthenticator, opts ...grpc.CallOption) (*MsgAddAuthenticatorResponse, error) {
	out := new(MsgAddAuthenticatorResponse)
	err := c.cc.Invoke(ctx, "/terp.smartaccount.v1beta1.Msg/AddAuthenticator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAuthenticator(ctx context.Context, in *MsgRemoveAuthenticator, opts ...grpc.CallOption) (*MsgRemoveAuthenticatorResponse, error) {
	out := new(MsgRemoveAuthenticatorResponse)
	err := c.cc.Invoke(ctx, "/terp.smartaccount.v1beta1.Msg/RemoveAuthenticator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetActiveState(ctx context.Context, in *MsgSetActiveState, opts ...grpc.CallOption) (*MsgSetActiveStateResponse, error) {
	out := new(MsgSetActiveStateResponse)
	err := c.cc.Invoke(ctx, "/terp.smartaccount.v1beta1.Msg/SetActiveState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddAuthenticator(context.Context, *MsgAddAuthenticator) (*MsgAddAuthenticatorResponse, error)
	RemoveAuthenticator(context.Context, *MsgRemoveAuthenticator) (*MsgRemoveAuthenticatorResponse, error)
	// SetActiveState sets the active state of the authenticator.
	// Primarily used for circuit breaking.
	SetActiveState(context.Context, *MsgSetActiveState) (*MsgSetActiveStateResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddAuthenticator(ctx context.Context, req *MsgAddAuthenticator) (*MsgAddAuthenticatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthenticator not implemented")
}
func (*UnimplementedMsgServer) RemoveAuthenticator(ctx context.Context, req *MsgRemoveAuthenticator) (*MsgRemoveAuthenticatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAuthenticator not implemented")
}
func (*UnimplementedMsgServer) SetActiveState(ctx context.Context, req *MsgSetActiveState) (*MsgSetActiveStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveState not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAuthenticator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terp.smartaccount.v1beta1.Msg/AddAuthenticator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAuthenticator(ctx, req.(*MsgAddAuthenticator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAuthenticator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terp.smartaccount.v1beta1.Msg/RemoveAuthenticator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAuthenticator(ctx, req.(*MsgRemoveAuthenticator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetActiveState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetActiveState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetActiveState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terp.smartaccount.v1beta1.Msg/SetActiveState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetActiveState(ctx, req.(*MsgSetActiveState))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "terp.smartaccount.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAuthenticator",
			Handler:    _Msg_AddAuthenticator_Handler,
		},
		{
			MethodName: "RemoveAuthenticator",
			Handler:    _Msg_RemoveAuthenticator_Handler,
		},
		{
			MethodName: "SetActiveState",
			Handler:    _Msg_SetActiveState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "terp/smartaccount/v1beta1/tx.proto",
}

func (m *MsgAddAuthenticator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAuthenticator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAuthenticator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuthenticatorType) > 0 {
		i -= len(m.AuthenticatorType)
		copy(dAtA[i:], m.AuthenticatorType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AuthenticatorType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticatorConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticatorConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticatorConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticatorConfig_ValueString) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticatorConfig_ValueString) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ValueString)
	copy(dAtA[i:], m.ValueString)
	i = encodeVarintTx(dAtA, i, uint64(len(m.ValueString)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *AuthenticatorConfig_ValueRaw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticatorConfig_ValueRaw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValueRaw != nil {
		i -= len(m.ValueRaw)
		copy(dAtA[i:], m.ValueRaw)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValueRaw)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SubAuthenticatorInitData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubAuthenticatorInitData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubAuthenticatorInitData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAuthenticatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAuthenticatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAuthenticatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAuthenticator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAuthenticator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAuthenticator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAuthenticatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAuthenticatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAuthenticatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetActiveState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetActiveState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetActiveState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetActiveStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetActiveStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetActiveStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AgAuthData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgAuthData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgAuthData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AggAuth != nil {
		{
			size, err := m.AggAuth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SelectedAuthenticators) > 0 {
		dAtA5 := make([]byte, len(m.SelectedAuthenticators)*10)
		var j4 int
		for _, num := range m.SelectedAuthenticators {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintTx(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pubkeys) > 0 {
		for iNdEx := len(m.Pubkeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Pubkeys[iNdEx])
			copy(dAtA[i:], m.Pubkeys[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Pubkeys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddAuthenticator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AuthenticatorType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *AuthenticatorConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *AuthenticatorConfig_ValueString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValueString)
	n += 1 + l + sovTx(uint64(l))
	return n
}
func (m *AuthenticatorConfig_ValueRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueRaw != nil {
		l = len(m.ValueRaw)
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}
func (m *SubAuthenticatorInitData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddAuthenticatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *MsgRemoveAuthenticator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgRemoveAuthenticatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *MsgSetActiveState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *MsgSetActiveStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgAuthData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *TxExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SelectedAuthenticators) > 0 {
		l = 0
		for _, e := range m.SelectedAuthenticators {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if m.AggAuth != nil {
		l = m.AggAuth.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *BlsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pubkeys) > 0 {
		for _, b := range m.Pubkeys {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovTx(uint64(m.Threshold))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddAuthenticator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAuthenticator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAuthenticator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticatorType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticatorType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &AuthenticatorConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticatorConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticatorConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticatorConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = &AuthenticatorConfig_ValueString{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueRaw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &AuthenticatorConfig_ValueRaw{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubAuthenticatorInitData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubAuthenticatorInitData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubAuthenticatorInitData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &AuthenticatorConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAuthenticatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAuthenticatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAuthenticatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAuthenticator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAuthenticator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAuthenticator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAuthenticatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAuthenticatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAuthenticatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetActiveState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetActiveState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetActiveState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetActiveStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetActiveStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetActiveStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgAuthData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgAuthData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgAuthData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SelectedAuthenticators = append(m.SelectedAuthenticators, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SelectedAuthenticators) == 0 {
					m.SelectedAuthenticators = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SelectedAuthenticators = append(m.SelectedAuthenticators, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedAuthenticators", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggAuth == nil {
				m.AggAuth = &AgAuthData{}
			}
			if err := m.AggAuth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkeys = append(m.Pubkeys, make([]byte, postIndex-iNdEx))
			copy(m.Pubkeys[len(m.Pubkeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
